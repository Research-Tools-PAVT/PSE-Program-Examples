{
    "symbolic_execution_tree": {
        "0": {
            "Branch Predicate": "(Eq 0 (ReadLSB w32 0 first_flip))",
            "Current State Id": 1,
            "False Generate ID": 3,
            "False KLEE Id": 2,
            "Fork": "True",
            "Negate Predicate": "(Eq false (Eq 0 (ReadLSB w32 0 first_flip)))",
            "True Generate ID": 2,
            "True KLEE Id": 1,
            "falseQuery": [
                "(Eq false (Eq 0 (Xor w32 1 (LShr w32 (ReadLSB w32 0 truth) 31))))",
                "(Slt (ReadLSB w32 0 truth) 2)",
                "(Sle 0 (ReadLSB w32 0 first_flip))",
                "(Sle (ReadLSB w32 0 first_flip) 1)",
                "(Eq false (Eq 0 (ReadLSB w32 0 first_flip)))"
            ],
            "hasChildren": "False",
            "isLeaf": "False",
            "state_id": 0,
            "trueQuery": [
                "(Eq false (Eq 0 (Xor w32 1 (LShr w32 (ReadLSB w32 0 truth) 31))))",
                "(Slt (ReadLSB w32 0 truth) 2)",
                "(Eq 0 (ReadLSB w32 0 first_flip))"
            ]
        },
        "2": {
            "Branch Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "Fork": "True",
            "Negate Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "ParentId": 0,
            "falseQuery": [],
            "hasChildren": "False",
            "isLeaf": "True",
            "state_id": 2,
            "trueQuery": [],
            "wasQueued": "True"
        },
        "3": {
            "Branch Predicate": "(Eq (ReadLSB w32 0 truth) (ZExt w32 (Eq 1 (ReadLSB w32 0 second_flip))))",
            "Current State Id": 2,
            "False Generate ID": 5,
            "False KLEE Id": 3,
            "Fork": "True",
            "Negate Predicate": "(Eq false (Eq (ReadLSB w32 0 truth) (ZExt w32 (Eq 1 (ReadLSB w32 0 second_flip)))))",
            "True Generate ID": 4,
            "True KLEE Id": 2,
            "falseQuery": [
                "(Eq false (Eq 0 (Xor w32 1 (LShr w32 (ReadLSB w32 0 truth) 31))))",
                "(Slt (ReadLSB w32 0 truth) 2)",
                "(Sle 0 (ReadLSB w32 0 first_flip))",
                "(Sle (ReadLSB w32 0 first_flip) 1)",
                "(Eq false (Eq 0 (ReadLSB w32 0 first_flip)))",
                "(Sle 0 (ReadLSB w32 0 second_flip))",
                "(Sle (ReadLSB w32 0 second_flip) 1)",
                "(Eq false (Eq (ReadLSB w32 0 truth) (ZExt w32 (Eq 1 (ReadLSB w32 0 second_flip)))))"
            ],
            "hasChildren": "False",
            "isLeaf": "False",
            "state_id": 3,
            "trueQuery": [
                "(Eq false (Eq 0 (Xor w32 1 (LShr w32 (ReadLSB w32 0 truth) 31))))",
                "(Slt (ReadLSB w32 0 truth) 2)",
                "(Sle 0 (ReadLSB w32 0 first_flip))",
                "(Sle (ReadLSB w32 0 first_flip) 1)",
                "(Eq false (Eq 0 (ReadLSB w32 0 first_flip)))",
                "(Sle 0 (ReadLSB w32 0 second_flip))",
                "(Sle (ReadLSB w32 0 second_flip) 1)",
                "(Eq (ReadLSB w32 0 truth) (ZExt w32 (Eq 1 (ReadLSB w32 0 second_flip))))"
            ]
        },
        "4": {
            "Branch Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "Fork": "True",
            "Negate Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "ParentId": 3,
            "falseQuery": [],
            "hasChildren": "False",
            "isLeaf": "True",
            "state_id": 4,
            "trueQuery": [],
            "wasQueued": "True"
        },
        "5": {
            "Branch Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "Fork": "True",
            "Negate Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "ParentId": 3,
            "falseQuery": [],
            "hasChildren": "False",
            "isLeaf": "True",
            "state_id": 5,
            "trueQuery": [],
            "wasQueued": "True"
        },
        "win_states": {
            "2": {
                "EmphId": 2,
                "stateId": 1
            },
            "4": {
                "EmphId": 4,
                "stateId": 2
            }
        }
    }
}
