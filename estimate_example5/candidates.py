# -*- coding: utf-8 -*-

import z3
import os
import sys

"""
Below are a list of constraints that dictate which 
path is taken during actual program execution. 
We process KLEE constraints and simplify them to get these 
constraints. 
"""

# ==== Will be Autogenerated by PyKLEE ====
n_sym, y_sym, = z3.Ints("n_sym y_sym")
prob_sym = z3.Real("prob_sym")

path1 = [
    (0.0075243180 < prob_sym),
    (1 <= y_sym),
    (prob_sym <= 0.0078125992),
    (10 <= n_sym)
]

path2 = [
    (0.0075243180 < prob_sym),
    (1 <= y_sym),
    (prob_sym <= 0.0078125992),
    n_sym == 0
]


paths = [path1, path2]


# ==== Will be Autogenerated by PyKLEE ====


pwd = os.path.dirname(__file__)
if not os.path.isdir("inputs"):
    os.mkdir("inputs")

inputFilePath = os.path.join(pwd, "inputs")


def generateCandidates(k: int):
    for index, path in enumerate(paths):

        print(f"Path {index + 1} : {path}")
        optpath = z3.Optimize()
        optpath.set("timeout", 5000)

        # This will get automated later to parse query
        # and retrieve directly from ProbQueryObject
        # COMMENT : Need to discuss the query constraints for this program.

        # Add the constraints and get candidate model from z3.
        for conds in path:
            optpath.add(conds)

        # COMMENT : Need to frame this optimization properly. How to automate it?
        # optpath.maximize(prob_sym * n_sym * y_sym)

        n = 0
        # TODO : Automate it later get MODELs.
        while optpath.check() == z3.sat and n != k:

            m = optpath.model()
            n += 1

            # Display the current model.
            print(f"\tModel : {n}")
            print("\t\t%s = %s" % (n_sym, m[n_sym]))
            print("\t\t%s = %s" % (y_sym, m[y_sym]))
            value_fraction = m[prob_sym].as_fraction()
            value = float((value_fraction.numerator)) / \
                float((value_fraction.denominator))
            print("\t\t%s = %.10f" % (prob_sym, round(value, 10)))

            # TODO : Automate it later.
            # See Model Values
            with open(
                os.path.join(inputFilePath, f"model_{index}_{n}.txt"), mode="w"
            ) as fileptr:
                fileptr.write(f"{m[n_sym]}\n")
                fileptr.write(f"{m[y_sym]}\n")
                fileptr.write(f"{round(value, 10):.10f}\n")

            # TODO : Automate it later.
            # Added blocking clauses.
            if path is not paths[1]:
                optpath.add(n_sym != m[n_sym])

            optpath.add(y_sym != m[y_sym])
            optpath.add(prob_sym != m[prob_sym])


if __name__ == "__main__":
    generateCandidates(int(sys.argv[1]))
