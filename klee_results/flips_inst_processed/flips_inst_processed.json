[
    {
        "File": "src/flips_inst.cpp",
        "Line": "16",
        "Predicate": "3",
        "Branch Predicate": " false",
        "Negate Predicate": " true"
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "16",
        "Predicate": "3",
        "Branch Predicate": " false",
        "Negate Predicate": " true"
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "16",
        "Predicate": "3",
        "Branch Predicate": " true",
        "Negate Predicate": " false"
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "33",
        "Predicate": "3",
        "Branch Predicate": " false",
        "Negate Predicate": " true"
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "33",
        "Predicate": "3",
        "Branch Predicate": " false",
        "Negate Predicate": " true"
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "33",
        "Predicate": "3",
        "Branch Predicate": " true",
        "Negate Predicate": " false"
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "52",
        "Predicate": "34",
        "Branch Predicate": " (Slt (ReadLSB w32 0 temp_c1_0)       (ReadLSB w32 0 b1_sym))",
        "Negate Predicate": " (Eq false      (Slt (ReadLSB w32 0 temp_c1_0)           (ReadLSB w32 0 b1_sym)))",
        "Fork": "True",
        "Current State Id": "1",
        "True KLEE Id": "1",
        "True Generate ID": "2",
        "trueQuery": [
            "(Sle 1 (ReadLSB w32 0 temp_c1_0))",
            "(Sle (ReadLSB w32 0 temp_c1_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_0))",
            "(Sle (ReadLSB w32 0 coin1_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_1))",
            "(Sle (ReadLSB w32 0 temp_c1_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_1))",
            "(Sle (ReadLSB w32 0 coin1_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_2))",
            "(Sle (ReadLSB w32 0 temp_c1_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_2))",
            "(Sle (ReadLSB w32 0 coin1_index_2) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_0))",
            "(Sle (ReadLSB w32 0 temp_c2_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_0))",
            "(Sle (ReadLSB w32 0 coin2_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_1))",
            "(Sle (ReadLSB w32 0 temp_c2_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_1))",
            "(Sle (ReadLSB w32 0 coin2_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_2))",
            "(Sle (ReadLSB w32 0 temp_c2_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_2))",
            "(Sle (ReadLSB w32 0 coin2_index_2) 1)",
            "(Slt (ReadLSB w32 0 temp_c1_0) (ReadLSB w32 0 b1_sym))"
        ],
        "False KLEE Id": "2",
        "False Generate ID": "3",
        "falseQuery": [
            "(Sle 1 (ReadLSB w32 0 temp_c1_0))",
            "(Sle (ReadLSB w32 0 temp_c1_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_0))",
            "(Sle (ReadLSB w32 0 coin1_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_1))",
            "(Sle (ReadLSB w32 0 temp_c1_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_1))",
            "(Sle (ReadLSB w32 0 coin1_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_2))",
            "(Sle (ReadLSB w32 0 temp_c1_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_2))",
            "(Sle (ReadLSB w32 0 coin1_index_2) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_0))",
            "(Sle (ReadLSB w32 0 temp_c2_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_0))",
            "(Sle (ReadLSB w32 0 coin2_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_1))",
            "(Sle (ReadLSB w32 0 temp_c2_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_1))",
            "(Sle (ReadLSB w32 0 coin2_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_2))",
            "(Sle (ReadLSB w32 0 temp_c2_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_2))",
            "(Sle (ReadLSB w32 0 coin2_index_2) 1)",
            "(Eq false (Slt (ReadLSB w32 0 temp_c1_0) (ReadLSB w32 0 b1_sym)))"
        ]
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "52",
        "Predicate": "55",
        "Branch Predicate": " (And (Slt N0:(ReadLSB w32 0 b2_sym)            N1:(ReadLSB w32 0 temp_c2_0))       (Slt (Add w32 (Add w32 (Add w32 (Add w32 (ReadLSB w32 0 sum2_sym)                                                (ZExt w32 (Sle N0 N1)))                                       (ZExt w32 (Sle N0                                                      (ReadLSB w32 0 temp_c2_1))))                              (ZExt w32 (Sle N0                                             (ReadLSB w32 0 temp_c2_2))))                     (Add w32 (Add w32 (Add w32 (ReadLSB w32 0 sum1_sym)                                                (ZExt w32 (Sle N2:(ReadLSB w32 0 b1_sym)                                                               (ReadLSB w32 0 temp_c1_0))))                                       (ZExt w32 (Sle N2                                                      (ReadLSB w32 0 temp_c1_1))))                              (ZExt w32 (Sle N2                                             (ReadLSB w32 0 temp_c1_2)))))            6))",
        "Negate Predicate": " (Eq false      (And (Slt N0:(ReadLSB w32 0 b2_sym)                N1:(ReadLSB w32 0 temp_c2_0))           (Slt (Add w32 (Add w32 (Add w32 (Add w32 (ReadLSB w32 0 sum2_sym)                                                    (ZExt w32 (Sle N0 N1)))                                           (ZExt w32 (Sle N0                                                          (ReadLSB w32 0 temp_c2_1))))                                  (ZExt w32 (Sle N0                                                 (ReadLSB w32 0 temp_c2_2))))                         (Add w32 (Add w32 (Add w32 (ReadLSB w32 0 sum1_sym)                                                    (ZExt w32 (Sle N2:(ReadLSB w32 0 b1_sym)                                                                   (ReadLSB w32 0 temp_c1_0))))                                           (ZExt w32 (Sle N2                                                          (ReadLSB w32 0 temp_c1_1))))                                  (ZExt w32 (Sle N2                                                 (ReadLSB w32 0 temp_c1_2)))))                6)))",
        "Fork": "True",
        "Current State Id": "1",
        "True KLEE Id": "1",
        "True Generate ID": "8",
        "trueQuery": [
            "(Sle 1 (ReadLSB w32 0 temp_c1_0))",
            "(Sle (ReadLSB w32 0 temp_c1_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_0))",
            "(Sle (ReadLSB w32 0 coin1_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_1))",
            "(Sle (ReadLSB w32 0 temp_c1_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_1))",
            "(Sle (ReadLSB w32 0 coin1_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_2))",
            "(Sle (ReadLSB w32 0 temp_c1_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_2))",
            "(Sle (ReadLSB w32 0 coin1_index_2) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_0))",
            "(Sle (ReadLSB w32 0 temp_c2_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_0))",
            "(Sle (ReadLSB w32 0 coin2_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_1))",
            "(Sle (ReadLSB w32 0 temp_c2_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_1))",
            "(Sle (ReadLSB w32 0 coin2_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_2))",
            "(Sle (ReadLSB w32 0 temp_c2_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_2))",
            "(Sle (ReadLSB w32 0 coin2_index_2) 1)",
            "(Slt (ReadLSB w32 0 temp_c1_0) (ReadLSB w32 0 b1_sym))",
            "(Slt (ReadLSB w32 0 b2_sym) (ReadLSB w32 0 temp_c2_0))",
            "(Slt (Add w32 (Add w32 (Add w32 (Add w32 (ReadLSB w32 0 sum2_sym) (ZExt w32 (Sle N0:(ReadLSB w32 0 b2_sym) (ReadLSB w32 0 temp_c2_0)))) (ZExt w32 (Sle N0 (ReadLSB w32 0 temp_c2_1)))) (ZExt w32 (Sle N0 (ReadLSB w32 0 temp_c2_2)))) (Add w32 (Add w32 (Add w32 (ReadLSB w32 0 sum1_sym) (ZExt w32 (Sle N1:(ReadLSB w32 0 b1_sym) (ReadLSB w32 0 temp_c1_0)))) (ZExt w32 (Sle N1 (ReadLSB w32 0 temp_c1_1)))) (ZExt w32 (Sle N1 (ReadLSB w32 0 temp_c1_2))))) 6)"
        ],
        "False KLEE Id": "5",
        "False Generate ID": "9",
        "falseQuery": [
            "(Sle 1 (ReadLSB w32 0 temp_c1_0))",
            "(Sle (ReadLSB w32 0 temp_c1_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_0))",
            "(Sle (ReadLSB w32 0 coin1_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_1))",
            "(Sle (ReadLSB w32 0 temp_c1_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_1))",
            "(Sle (ReadLSB w32 0 coin1_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_2))",
            "(Sle (ReadLSB w32 0 temp_c1_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_2))",
            "(Sle (ReadLSB w32 0 coin1_index_2) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_0))",
            "(Sle (ReadLSB w32 0 temp_c2_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_0))",
            "(Sle (ReadLSB w32 0 coin2_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_1))",
            "(Sle (ReadLSB w32 0 temp_c2_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_1))",
            "(Sle (ReadLSB w32 0 coin2_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_2))",
            "(Sle (ReadLSB w32 0 temp_c2_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_2))",
            "(Sle (ReadLSB w32 0 coin2_index_2) 1)",
            "(Slt (ReadLSB w32 0 temp_c1_0) (ReadLSB w32 0 b1_sym))",
            "(Eq false (And (Slt N0:(ReadLSB w32 0 b2_sym) N1:(ReadLSB w32 0 temp_c2_0)) (Slt (Add w32 (Add w32 (Add w32 (Add w32 (ReadLSB w32 0 sum2_sym) (ZExt w32 (Sle N0 N1))) (ZExt w32 (Sle N0 (ReadLSB w32 0 temp_c2_1)))) (ZExt w32 (Sle N0 (ReadLSB w32 0 temp_c2_2)))) (Add w32 (Add w32 (Add w32 (ReadLSB w32 0 sum1_sym) (ZExt w32 (Sle N2:(ReadLSB w32 0 b1_sym) (ReadLSB w32 0 temp_c1_0)))) (ZExt w32 (Sle N2 (ReadLSB w32 0 temp_c1_1)))) (ZExt w32 (Sle N2 (ReadLSB w32 0 temp_c1_2))))) 6)))"
        ]
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "53",
        "Predicate": "34",
        "Branch Predicate": " (Slt (ReadLSB w32 0 b1_sym)       (ReadLSB w32 0 temp_c1_0))",
        "Negate Predicate": " (Eq false      (Slt (ReadLSB w32 0 b1_sym)           (ReadLSB w32 0 temp_c1_0)))",
        "Fork": "True",
        "Current State Id": "2",
        "True KLEE Id": "2",
        "True Generate ID": "4",
        "trueQuery": [
            "(Sle 1 (ReadLSB w32 0 temp_c1_0))",
            "(Sle (ReadLSB w32 0 temp_c1_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_0))",
            "(Sle (ReadLSB w32 0 coin1_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_1))",
            "(Sle (ReadLSB w32 0 temp_c1_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_1))",
            "(Sle (ReadLSB w32 0 coin1_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_2))",
            "(Sle (ReadLSB w32 0 temp_c1_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_2))",
            "(Sle (ReadLSB w32 0 coin1_index_2) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_0))",
            "(Sle (ReadLSB w32 0 temp_c2_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_0))",
            "(Sle (ReadLSB w32 0 coin2_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_1))",
            "(Sle (ReadLSB w32 0 temp_c2_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_1))",
            "(Sle (ReadLSB w32 0 coin2_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_2))",
            "(Sle (ReadLSB w32 0 temp_c2_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_2))",
            "(Sle (ReadLSB w32 0 coin2_index_2) 1)",
            "(Eq false (Slt (ReadLSB w32 0 temp_c1_0) (ReadLSB w32 0 b1_sym)))",
            "(Slt (ReadLSB w32 0 b1_sym) (ReadLSB w32 0 temp_c1_0))"
        ],
        "False KLEE Id": "3",
        "False Generate ID": "5",
        "falseQuery": [
            "(Sle 1 (ReadLSB w32 0 temp_c1_0))",
            "(Sle (ReadLSB w32 0 temp_c1_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_0))",
            "(Sle (ReadLSB w32 0 coin1_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_1))",
            "(Sle (ReadLSB w32 0 temp_c1_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_1))",
            "(Sle (ReadLSB w32 0 coin1_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_2))",
            "(Sle (ReadLSB w32 0 temp_c1_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_2))",
            "(Sle (ReadLSB w32 0 coin1_index_2) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_0))",
            "(Sle (ReadLSB w32 0 temp_c2_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_0))",
            "(Sle (ReadLSB w32 0 coin2_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_1))",
            "(Sle (ReadLSB w32 0 temp_c2_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_1))",
            "(Sle (ReadLSB w32 0 coin2_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_2))",
            "(Sle (ReadLSB w32 0 temp_c2_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_2))",
            "(Sle (ReadLSB w32 0 coin2_index_2) 1)",
            "(Eq false (Slt (ReadLSB w32 0 temp_c1_0) (ReadLSB w32 0 b1_sym)))",
            "(Eq false (Slt (ReadLSB w32 0 b1_sym) (ReadLSB w32 0 temp_c1_0)))"
        ]
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "53",
        "Predicate": "55",
        "Branch Predicate": " (Slt (ReadLSB w32 0 temp_c2_0)       (ReadLSB w32 0 b2_sym))",
        "Negate Predicate": " (Eq false      (Slt (ReadLSB w32 0 temp_c2_0)           (ReadLSB w32 0 b2_sym)))",
        "Fork": "True",
        "Current State Id": "2",
        "True KLEE Id": "2",
        "True Generate ID": "6",
        "trueQuery": [
            "(Sle 1 (ReadLSB w32 0 temp_c1_0))",
            "(Sle (ReadLSB w32 0 temp_c1_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_0))",
            "(Sle (ReadLSB w32 0 coin1_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_1))",
            "(Sle (ReadLSB w32 0 temp_c1_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_1))",
            "(Sle (ReadLSB w32 0 coin1_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_2))",
            "(Sle (ReadLSB w32 0 temp_c1_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_2))",
            "(Sle (ReadLSB w32 0 coin1_index_2) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_0))",
            "(Sle (ReadLSB w32 0 temp_c2_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_0))",
            "(Sle (ReadLSB w32 0 coin2_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_1))",
            "(Sle (ReadLSB w32 0 temp_c2_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_1))",
            "(Sle (ReadLSB w32 0 coin2_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_2))",
            "(Sle (ReadLSB w32 0 temp_c2_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_2))",
            "(Sle (ReadLSB w32 0 coin2_index_2) 1)",
            "(Eq false (Slt (ReadLSB w32 0 temp_c1_0) (ReadLSB w32 0 b1_sym)))",
            "(Slt (ReadLSB w32 0 b1_sym) (ReadLSB w32 0 temp_c1_0))",
            "(Slt (ReadLSB w32 0 temp_c2_0) (ReadLSB w32 0 b2_sym))"
        ],
        "False KLEE Id": "4",
        "False Generate ID": "7",
        "falseQuery": [
            "(Sle 1 (ReadLSB w32 0 temp_c1_0))",
            "(Sle (ReadLSB w32 0 temp_c1_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_0))",
            "(Sle (ReadLSB w32 0 coin1_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_1))",
            "(Sle (ReadLSB w32 0 temp_c1_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_1))",
            "(Sle (ReadLSB w32 0 coin1_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c1_2))",
            "(Sle (ReadLSB w32 0 temp_c1_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin1_index_2))",
            "(Sle (ReadLSB w32 0 coin1_index_2) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_0))",
            "(Sle (ReadLSB w32 0 temp_c2_0) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_0))",
            "(Sle (ReadLSB w32 0 coin2_index_0) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_1))",
            "(Sle (ReadLSB w32 0 temp_c2_1) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_1))",
            "(Sle (ReadLSB w32 0 coin2_index_1) 1)",
            "(Sle 1 (ReadLSB w32 0 temp_c2_2))",
            "(Sle (ReadLSB w32 0 temp_c2_2) 100000)",
            "(Sle 0 (ReadLSB w32 0 coin2_index_2))",
            "(Sle (ReadLSB w32 0 coin2_index_2) 1)",
            "(Eq false (Slt (ReadLSB w32 0 temp_c1_0) (ReadLSB w32 0 b1_sym)))",
            "(Slt (ReadLSB w32 0 b1_sym) (ReadLSB w32 0 temp_c1_0))",
            "(Eq false (Slt (ReadLSB w32 0 temp_c2_0) (ReadLSB w32 0 b2_sym)))"
        ]
    },
    {
        "File": "src/flips_inst.cpp",
        "Line": "53",
        "Predicate": "34",
        "Branch Predicate": " (Slt (ReadLSB w32 0 b1_sym)       (ReadLSB w32 0 temp_c1_0))",
        "Negate Predicate": " (Eq false      (Slt (ReadLSB w32 0 b1_sym)           (ReadLSB w32 0 temp_c1_0)))"
    }
]