{
    "symbolic_execution_tree": {
        "0": {
            "Branch Predicate": "(Eq 1 (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0:(Add w32 (Mul w32 N1:(ReadLSB w32 0 r_sym_1) (ReadLSB w32 0 B_3)) (Mul w32 N2:(ReadLSB w32 0 r_sym) (ReadLSB w32 0 B_2))) (ReadLSB w32 0 A_3)) (Mul w32 N3:(Add w32 (Mul w32 N1 (ReadLSB w32 0 B_1)) (Mul w32 N2 (ReadLSB w32 0 B))) (ReadLSB w32 0 A_2))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_3)) (Mul w32 N2 (ReadLSB w32 0 C_2))))) (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0 (ReadLSB w32 0 A_1)) (Mul w32 N3 (ReadLSB w32 0 A))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_1)) (Mul w32 N2 (ReadLSB w32 0 C))))) 1 0) 0))",
            "Current State Id": 1,
            "False Generate ID": 3,
            "False KLEE Id": 2,
            "Fork": "True",
            "Negate Predicate": "(Eq false (Eq 1 (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0:(Add w32 (Mul w32 N1:(ReadLSB w32 0 r_sym_1) (ReadLSB w32 0 B_3)) (Mul w32 N2:(ReadLSB w32 0 r_sym) (ReadLSB w32 0 B_2))) (ReadLSB w32 0 A_3)) (Mul w32 N3:(Add w32 (Mul w32 N1 (ReadLSB w32 0 B_1)) (Mul w32 N2 (ReadLSB w32 0 B))) (ReadLSB w32 0 A_2))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_3)) (Mul w32 N2 (ReadLSB w32 0 C_2))))) (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0 (ReadLSB w32 0 A_1)) (Mul w32 N3 (ReadLSB w32 0 A))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_1)) (Mul w32 N2 (ReadLSB w32 0 C))))) 1 0) 0)))",
            "True Generate ID": 2,
            "True KLEE Id": 1,
            "falseQuery": [
                "(Eq false (And (And (And (Eq (ReadLSB w32 0 C_1) (Add w32 (Mul w32 N0:(ReadLSB w32 0 B_1) N1:(ReadLSB w32 0 A)) (Mul w32 N2:(ReadLSB w32 0 B_3) N3:(ReadLSB w32 0 A_1)))) (Eq (ReadLSB w32 0 C) (Add w32 (Mul w32 N4:(ReadLSB w32 0 B) N1) (Mul w32 N5:(ReadLSB w32 0 B_2) N3)))) (Eq (ReadLSB w32 0 C_2) (Add w32 (Mul w32 N4 N6:(ReadLSB w32 0 A_2)) (Mul w32 N5 N7:(ReadLSB w32 0 A_3))))) (Eq (ReadLSB w32 0 C_3) (Add w32 (Mul w32 N0 N6) (Mul w32 N2 N7)))))",
                "(Sle 0 (ReadLSB w32 0 r_sym))",
                "(Sle (ReadLSB w32 0 r_sym) 1)",
                "(Sle 0 (ReadLSB w32 0 r_sym_1))",
                "(Sle (ReadLSB w32 0 r_sym_1) 1)",
                "(Eq false (Eq 1 (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0:(Add w32 (Mul w32 N1:(ReadLSB w32 0 r_sym_1) (ReadLSB w32 0 B_3)) (Mul w32 N2:(ReadLSB w32 0 r_sym) (ReadLSB w32 0 B_2))) (ReadLSB w32 0 A_3)) (Mul w32 N3:(Add w32 (Mul w32 N1 (ReadLSB w32 0 B_1)) (Mul w32 N2 (ReadLSB w32 0 B))) (ReadLSB w32 0 A_2))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_3)) (Mul w32 N2 (ReadLSB w32 0 C_2))))) (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0 (ReadLSB w32 0 A_1)) (Mul w32 N3 (ReadLSB w32 0 A))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_1)) (Mul w32 N2 (ReadLSB w32 0 C))))) 1 0) 0)))"
            ],
            "hasChildren": "False",
            "isLeaf": "False",
            "state_id": 0,
            "trueQuery": [
                "(Eq false (And (And (And (Eq (ReadLSB w32 0 C_1) (Add w32 (Mul w32 N0:(ReadLSB w32 0 B_1) N1:(ReadLSB w32 0 A)) (Mul w32 N2:(ReadLSB w32 0 B_3) N3:(ReadLSB w32 0 A_1)))) (Eq (ReadLSB w32 0 C) (Add w32 (Mul w32 N4:(ReadLSB w32 0 B) N1) (Mul w32 N5:(ReadLSB w32 0 B_2) N3)))) (Eq (ReadLSB w32 0 C_2) (Add w32 (Mul w32 N4 N6:(ReadLSB w32 0 A_2)) (Mul w32 N5 N7:(ReadLSB w32 0 A_3))))) (Eq (ReadLSB w32 0 C_3) (Add w32 (Mul w32 N0 N6) (Mul w32 N2 N7)))))",
                "(Sle 0 (ReadLSB w32 0 r_sym))",
                "(Sle (ReadLSB w32 0 r_sym) 1)",
                "(Sle 0 (ReadLSB w32 0 r_sym_1))",
                "(Sle (ReadLSB w32 0 r_sym_1) 1)",
                "(Eq 1 (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0:(Add w32 (Mul w32 N1:(ReadLSB w32 0 r_sym_1) (ReadLSB w32 0 B_3)) (Mul w32 N2:(ReadLSB w32 0 r_sym) (ReadLSB w32 0 B_2))) (ReadLSB w32 0 A_3)) (Mul w32 N3:(Add w32 (Mul w32 N1 (ReadLSB w32 0 B_1)) (Mul w32 N2 (ReadLSB w32 0 B))) (ReadLSB w32 0 A_2))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_3)) (Mul w32 N2 (ReadLSB w32 0 C_2))))) (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0 (ReadLSB w32 0 A_1)) (Mul w32 N3 (ReadLSB w32 0 A))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_1)) (Mul w32 N2 (ReadLSB w32 0 C))))) 1 0) 0))"
            ]
        },
        "2": {
            "Branch Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "Fork": "True",
            "Negate Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "ParentId": 0,
            "falseQuery": [],
            "hasChildren": "False",
            "isLeaf": "True",
            "state_id": 2,
            "trueQuery": [],
            "wasQueued": "True"
        },
        "3": {
            "Branch Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "Fork": "True",
            "Negate Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "ParentId": 0,
            "falseQuery": [],
            "hasChildren": "False",
            "isLeaf": "True",
            "state_id": 3,
            "trueQuery": [],
            "wasQueued": "True"
        },
        "win_states": {
            "2": {
                "EmphId": 2,
                "stateId": 1
            }
        }
    }
}