{
    "RemovedState": {
        "3": {
            "EmphId": 3,
            "Id": 3
        }
    },
    "symbolic_execution_tree": {
        "0": {
            "Branch Predicate": "(Eq (Add w32 (Add w32 (Mul w32 (ReadLSB w32 0 B_sym1) (ReadLSB w32 0 A_sym0)) (Mul w32 (ReadLSB w32 0 B_sym4) (ReadLSB w32 0 A_sym1))) (Mul w32 (ReadLSB w32 0 B_sym7) (ReadLSB w32 0 A_sym2))) (ReadLSB w32 0 C_sym1))",
            "Current State Id": 2,
            "False Generate ID": 3,
            "False KLEE Id": 3,
            "Fork": "True",
            "Negate Predicate": "(Eq false (Eq (Add w32 (Add w32 (Mul w32 (ReadLSB w32 0 B_sym1) (ReadLSB w32 0 A_sym0)) (Mul w32 (ReadLSB w32 0 B_sym4) (ReadLSB w32 0 A_sym1))) (Mul w32 (ReadLSB w32 0 B_sym7) (ReadLSB w32 0 A_sym2))) (ReadLSB w32 0 C_sym1)))",
            "True Generate ID": 2,
            "True KLEE Id": 2,
            "falseQuery": [
                "(Eq false (Eq (ReadLSB w32 0 C_sym0) (Add w32 (Add w32 (Mul w32 (ReadLSB w32 0 B_sym0) (ReadLSB w32 0 A_sym0)) (Mul w32 (ReadLSB w32 0 B_sym3) (ReadLSB w32 0 A_sym1))) (Mul w32 (ReadLSB w32 0 B_sym6) (ReadLSB w32 0 A_sym2)))))",
                "(Sle 0 (ReadLSB w32 0 r_sym_0))",
                "(Sle (ReadLSB w32 0 r_sym_0) 1)",
                "(Sle 0 (ReadLSB w32 0 r_sym_1))",
                "(Sle (ReadLSB w32 0 r_sym_1) 1)",
                "(Sle 0 (ReadLSB w32 0 r_sym_2))",
                "(Sle (ReadLSB w32 0 r_sym_2) 1)",
                "(Eq 1 (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0:(Add w32 (Mul w32 N1:(ReadLSB w32 0 r_sym_2) (ReadLSB w32 0 B_sym8)) (Add w32 (Mul w32 N2:(ReadLSB w32 0 r_sym_1) (ReadLSB w32 0 B_sym7)) (Mul w32 N3:(ReadLSB w32 0 r_sym_0) (ReadLSB w32 0 B_sym6)))) (ReadLSB w32 0 A_sym8)) (Add w32 (Mul w32 N4:(Add w32 (Mul w32 N1 (ReadLSB w32 0 B_sym5)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 B_sym4)) (Mul w32 N3 (ReadLSB w32 0 B_sym3)))) (ReadLSB w32 0 A_sym7)) (Mul w32 N5:(Add w32 (Mul w32 N1 (ReadLSB w32 0 B_sym2)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 B_sym1)) (Mul w32 N3 (ReadLSB w32 0 B_sym0)))) (ReadLSB w32 0 A_sym6)))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_sym8)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 C_sym7)) (Mul w32 N3 (ReadLSB w32 0 C_sym6)))))) (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0 (ReadLSB w32 0 A_sym5)) (Add w32 (Mul w32 N4 (ReadLSB w32 0 A_sym4)) (Mul w32 N5 (ReadLSB w32 0 A_sym3)))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_sym5)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 C_sym4)) (Mul w32 N3 (ReadLSB w32 0 C_sym3)))))) (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0 (ReadLSB w32 0 A_sym2)) (Add w32 (Mul w32 N4 (ReadLSB w32 0 A_sym1)) (Mul w32 N5 (ReadLSB w32 0 A_sym0)))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_sym2)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 C_sym1)) (Mul w32 N3 (ReadLSB w32 0 C_sym0)))))) 1 0) 0) 0))",
                "(Eq false (Eq (Add w32 (Add w32 (Mul w32 (ReadLSB w32 0 B_sym1) (ReadLSB w32 0 A_sym0)) (Mul w32 (ReadLSB w32 0 B_sym4) (ReadLSB w32 0 A_sym1))) (Mul w32 (ReadLSB w32 0 B_sym7) (ReadLSB w32 0 A_sym2))) (ReadLSB w32 0 C_sym1)))"
            ],
            "hasChildren": "False",
            "isLeaf": "False",
            "state_id": 0,
            "trueQuery": [
                "(Eq false (Eq (ReadLSB w32 0 C_sym0) (Add w32 (Add w32 (Mul w32 (ReadLSB w32 0 B_sym0) (ReadLSB w32 0 A_sym0)) (Mul w32 (ReadLSB w32 0 B_sym3) (ReadLSB w32 0 A_sym1))) (Mul w32 (ReadLSB w32 0 B_sym6) (ReadLSB w32 0 A_sym2)))))",
                "(Sle 0 (ReadLSB w32 0 r_sym_0))",
                "(Sle (ReadLSB w32 0 r_sym_0) 1)",
                "(Sle 0 (ReadLSB w32 0 r_sym_1))",
                "(Sle (ReadLSB w32 0 r_sym_1) 1)",
                "(Sle 0 (ReadLSB w32 0 r_sym_2))",
                "(Sle (ReadLSB w32 0 r_sym_2) 1)",
                "(Eq 1 (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0:(Add w32 (Mul w32 N1:(ReadLSB w32 0 r_sym_2) (ReadLSB w32 0 B_sym8)) (Add w32 (Mul w32 N2:(ReadLSB w32 0 r_sym_1) (ReadLSB w32 0 B_sym7)) (Mul w32 N3:(ReadLSB w32 0 r_sym_0) (ReadLSB w32 0 B_sym6)))) (ReadLSB w32 0 A_sym8)) (Add w32 (Mul w32 N4:(Add w32 (Mul w32 N1 (ReadLSB w32 0 B_sym5)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 B_sym4)) (Mul w32 N3 (ReadLSB w32 0 B_sym3)))) (ReadLSB w32 0 A_sym7)) (Mul w32 N5:(Add w32 (Mul w32 N1 (ReadLSB w32 0 B_sym2)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 B_sym1)) (Mul w32 N3 (ReadLSB w32 0 B_sym0)))) (ReadLSB w32 0 A_sym6)))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_sym8)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 C_sym7)) (Mul w32 N3 (ReadLSB w32 0 C_sym6)))))) (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0 (ReadLSB w32 0 A_sym5)) (Add w32 (Mul w32 N4 (ReadLSB w32 0 A_sym4)) (Mul w32 N5 (ReadLSB w32 0 A_sym3)))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_sym5)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 C_sym4)) (Mul w32 N3 (ReadLSB w32 0 C_sym3)))))) (Select w32 (Eq 0 (Sub w32 (Add w32 (Mul w32 N0 (ReadLSB w32 0 A_sym2)) (Add w32 (Mul w32 N4 (ReadLSB w32 0 A_sym1)) (Mul w32 N5 (ReadLSB w32 0 A_sym0)))) (Add w32 (Mul w32 N1 (ReadLSB w32 0 C_sym2)) (Add w32 (Mul w32 N2 (ReadLSB w32 0 C_sym1)) (Mul w32 N3 (ReadLSB w32 0 C_sym0)))))) 1 0) 0) 0))",
                "(Eq (Add w32 (Add w32 (Mul w32 (ReadLSB w32 0 B_sym1) (ReadLSB w32 0 A_sym0)) (Mul w32 (ReadLSB w32 0 B_sym4) (ReadLSB w32 0 A_sym1))) (Mul w32 (ReadLSB w32 0 B_sym7) (ReadLSB w32 0 A_sym2))) (ReadLSB w32 0 C_sym1))"
            ],
            "wasQueued": "True"
        },
        "2": {
            "Branch Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "Fork": "True",
            "Negate Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "ParentId": 0,
            "falseQuery": [],
            "hasChildren": "False",
            "isLeaf": "True",
            "state_id": 2,
            "trueQuery": [],
            "wasQueued": "True"
        },
        "3": {
            "Branch Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "Fork": "True",
            "Negate Predicate": "(Eq 0 (ReadLSB w32 0 leaf_sym))",
            "ParentId": 0,
            "falseQuery": [],
            "hasChildren": "False",
            "isLeaf": "True",
            "state_id": 3,
            "trueQuery": [],
            "wasQueued": "True"
        },
        "win_states": {
            "2": {
                "EmphId": 2,
                "stateId": 2
            }
        }
    }
}
