digraph ExecutionTree {
	1 -> 2 [label="(And
(Eq false
(Eq 1
(ReadLSB w32 0 car_door_pse_sym)))
(Eq false
(Eq 1
(ReadLSB w32 0 choice_pse_sym))))" color=green]
	1 -> 3 [label="(Eq false
(And
(Eq false
(Eq 1
(ReadLSB w32 0 car_door_pse_sym)))
(Eq false
(Eq 1
(ReadLSB w32 0 choice_pse_sym)))))" color=red]
	2 -> 14 [label="(Eq false
(Eq 0
(ReadLSB w32 0 door_switch_pse_sym)))" color=green]
	2 -> 15 [label="(Eq 0
(ReadLSB w32 0 door_switch_pse_sym))" color=red]
	3 -> 4 [label="(And
(Eq false
(Eq 2
(ReadLSB w32 0 car_door_pse_sym)))
(Eq false
(Eq 2
(ReadLSB w32 0 choice_pse_sym))))" color=green]
	3 -> 5 [label="(Eq false
(And
(Eq false
(Eq 2
(ReadLSB w32 0 car_door_pse_sym)))
(Eq false
(Eq 2
(ReadLSB w32 0 choice_pse_sym)))))" color=red]
	4 -> 8 [label="(Eq false
(Eq 0
(ReadLSB w32 0 door_switch_pse_sym)))" color=green]
	4 -> 9 [label="(Eq 0
(ReadLSB w32 0 door_switch_pse_sym))" color=red]
	5 -> 6 [label="(Eq false
(Eq 0
(ReadLSB w32 0 door_switch_pse_sym)))" color=green]
	5 -> 7 [label="(Eq 0
(ReadLSB w32 0 door_switch_pse_sym))" color=red]
	6 -> 10 [label="(Eq 1
(ReadLSB w32 0 choice_pse_sym))" color=green]
	6 -> 11 [label="(Eq false
(Eq 1
(ReadLSB w32 0 choice_pse_sym)))" color=red]
	8 -> 12 [label="(Eq 1
(ReadLSB w32 0 choice_pse_sym))" color=green]
	8 -> 13 [label="(Eq false
(Eq 1
(ReadLSB w32 0 choice_pse_sym)))" color=red]
	14 -> 16 [label="(Eq 2
(ReadLSB w32 0 choice_pse_sym))" color=green]
	14 -> 17 [label="(Eq false
(Eq 2
(ReadLSB w32 0 choice_pse_sym)))" color=red]
}
