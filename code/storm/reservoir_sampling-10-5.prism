// Reservoir Sampling
// n = ?
// k = ?
mdp

const int N = 6;
const int n = 10;
const int k = 5;

module main

  // S[1..n] is the sampling array
  S1: [1..N];
	S2: [1..N];
	S3: [1..N];
	S4: [1..N];
	S5: [1..N];
  S6: [1..N];
	S7: [1..N];
	S8: [1..N];
	S9: [1..N];
	S0: [1..N];

	// R[1..k] is the random sample from S
	R1: int;
	R2: int;
	R3: int;
	R4: int;
	R5: int;

	// Status of sample
	s: [0..1];

	// i is the current loop iteration/array position
	i: [(k+1)..(n+1)];

	// j is the random sample position for each i
	j: [1..n];

	[] i=6 & s=0 -> 1/6 : (j'=1) & (s'=1)
	              + 1/6 : (j'=2) & (s'=1)
								+ 1/6 : (j'=3) & (s'=1)
								+ 1/6 : (j'=4) & (s'=1)
								+ 1/6 : (j'=5) & (s'=1)
								+ 1/6 : (j'=6) & (s'=1); 
	[] i=6 & s=1 & j=1 -> (R1'=S6) & (i'=i+1) & (s'=0);
	[] i=6 & s=1 & j=2 -> (R2'=S6) & (i'=i+1) & (s'=0);
	[] i=6 & s=1 & j=3 -> (R3'=S6) & (i'=i+1) & (s'=0);
	[] i=6 & s=1 & j=4 -> (R4'=S6) & (i'=i+1) & (s'=0);
	[] i=6 & s=1 & j=5 -> (R5'=S6) & (i'=i+1) & (s'=0);
	[] i=6 & s=1 & j=6 -> (i'=i+1) & (s'=0);

	[] i=7 & s=0 -> 1/7 : (j'=1) & (s'=1)
	              + 1/7 : (j'=2) & (s'=1)
								+ 1/7 : (j'=3) & (s'=1)
								+ 1/7 : (j'=4) & (s'=1)
								+ 1/7 : (j'=5) & (s'=1)
								+ 1/7 : (j'=6) & (s'=1)
								+ 1/7 : (j'=7) & (s'=1); 
	[] i=7 & s=1 & j=1 -> (R1'=S7) & (i'=i+1) & (s'=0);
	[] i=7 & s=1 & j=2 -> (R2'=S7) & (i'=i+1) & (s'=0);
	[] i=7 & s=1 & j=3 -> (R3'=S7) & (i'=i+1) & (s'=0);
	[] i=7 & s=1 & j=4 -> (R4'=S7) & (i'=i+1) & (s'=0);
	[] i=7 & s=1 & j=5 -> (R5'=S7) & (i'=i+1) & (s'=0);
	[] i=7 & s=1 & j=6 -> (i'=i+1) & (s'=0);
	[] i=7 & s=1 & j=7 -> (i'=i+1) & (s'=0);

	[] i=8 & s=0 -> 1/8 : (j'=1) & (s'=1)
	              + 1/8 : (j'=2) & (s'=1)
								+ 1/8 : (j'=3) & (s'=1)
								+ 1/8 : (j'=4) & (s'=1)
								+ 1/8 : (j'=5) & (s'=1)
								+ 1/8 : (j'=6) & (s'=1)
								+ 1/8 : (j'=7) & (s'=1)
								+ 1/8 : (j'=8) & (s'=1); 
	[] i=8 & s=1 & j=1 -> (R1'=S8) & (i'=i+1) & (s'=0);
	[] i=8 & s=1 & j=2 -> (R2'=S8) & (i'=i+1) & (s'=0);
	[] i=8 & s=1 & j=3 -> (R3'=S8) & (i'=i+1) & (s'=0);
	[] i=8 & s=1 & j=4 -> (R4'=S8) & (i'=i+1) & (s'=0);
	[] i=8 & s=1 & j=5 -> (R5'=S8) & (i'=i+1) & (s'=0);
	[] i=8 & s=1 & j=6 -> (i'=i+1) & (s'=0);
	[] i=8 & s=1 & j=7 -> (i'=i+1) & (s'=0);
	[] i=8 & s=1 & j=8 -> (i'=i+1) & (s'=0);

	[] i=9 & s=0 -> 1/9 : (j'=1) & (s'=1)
	              + 1/9 : (j'=2) & (s'=1)
								+ 1/9 : (j'=3) & (s'=1)
								+ 1/9 : (j'=4) & (s'=1)
								+ 1/9 : (j'=5) & (s'=1)
								+ 1/9 : (j'=6) & (s'=1)
								+ 1/9 : (j'=7) & (s'=1)
								+ 1/9 : (j'=8) & (s'=1)
								+ 1/9 : (j'=9) & (s'=1); 
	[] i=9 & s=1 & j=1 -> (R1'=S9) & (i'=i+1) & (s'=0);
	[] i=9 & s=1 & j=2 -> (R2'=S9) & (i'=i+1) & (s'=0);
	[] i=9 & s=1 & j=3 -> (R3'=S9) & (i'=i+1) & (s'=0);
	[] i=9 & s=1 & j=4 -> (R4'=S9) & (i'=i+1) & (s'=0);
	[] i=9 & s=1 & j=5 -> (R5'=S9) & (i'=i+1) & (s'=0);
	[] i=9 & s=1 & j=6 -> (i'=i+1) & (s'=0);
	[] i=9 & s=1 & j=7 -> (i'=i+1) & (s'=0);
	[] i=9 & s=1 & j=8 -> (i'=i+1) & (s'=0);
	[] i=9 & s=1 & j=9 -> (i'=i+1) & (s'=0);

	[] i=10 & s=0 -> 1/10 : (j'=1) & (s'=1)
	              + 1/10 : (j'=2) & (s'=1)
								+ 1/10 : (j'=3) & (s'=1)
								+ 1/10 : (j'=4) & (s'=1)
								+ 1/10 : (j'=5) & (s'=1)
								+ 1/10 : (j'=6) & (s'=1)
								+ 1/10 : (j'=7) & (s'=1)
								+ 1/10 : (j'=8) & (s'=1)
								+ 1/10 : (j'=9) & (s'=1)
								+ 1/10 : (j'=10) & (s'=1); 
	[] i=10 & s=1 & j=1 -> (R1'=S0) & (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=2 -> (R2'=S0) & (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=3 -> (R3'=S0) & (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=4 -> (R4'=S0) & (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=5 -> (R5'=S0) & (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=6 -> (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=7 -> (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=8 -> (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=9 -> (i'=i+1) & (s'=0);
	[] i=10 & s=1 & j=10 -> (i'=i+1) & (s'=0);

	[done] i=11 -> true;
endmodule

init s=0 & i=k+1 & R1=S1 & R2=S2 & R3=S3 & R4=S4 & R5=S5 & S1!=S2 & S1!=S3 & S1!=S4 & S1!=S5 & S1!=S6 & S1!=S7 & S1!=S8 & S1!=S9 & S1!=S0 endinit
label "prop" = i=11 & (R1=S1);
